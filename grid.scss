$gutter-width: 1em !default;
$outer-margin: 2em !default;
$columns: 12 !default;
$gutter-compensation: $gutter-width * -0.5;
$half-gutter-width: $gutter-width * 0.5;

.container-fluid, .container {
  margin-right: auto;
  margin-left: auto;
}

.container-fluid {
  padding-right: $outer-margin;
  padding-left: $outer-margin;
}

.row {
  box-sizing: border-box;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;
  margin-right: $gutter-compensation;
  margin-left: $gutter-compensation;
}

.flex-center {
  justify-content: center !important;
  align-items: center !important;
}

.flex-center--x {
  justify-content: center !important;
}

.flex-center--y {
  align-items: center !important;
}

.flex-column {
  flex-direction: column;
}

@each $class, $prop in (col: column, row: row) {
  .#{$class}.reverse {
    flex-direction: #{$prop}-reverse;
  }
}

@mixin bottom ($size) {
  @if ($size == '0') {
    @content;
  } @else {
    @media only screen and (min-width: $size) {
      @content;
    }
  }
}

@mixin only ($sizes, $i) {
  @if ($i == 1) {
    $next: nth($sizes, 2);
    @media (max-width: nth($next, 2)) {
      @content;
    }
  } @else if (length($sizes) > $i) {
    $next: nth($sizes, $i + 1);
    $current: nth($sizes, $i);
    @media (min-width: nth($current, 2)) and (max-width: nth($next, 2) - .001) {
      @content;
    }
  } @else {
    $current: nth($sizes, $i);
    @media (min-width: nth($current, 2)) {
      @content;
    }
  }
}

@mixin break ($type, $sizes, $bottom, $i) {
  @if ($type == bottom) {
    @include bottom ($bottom) {
      @content;
    }
  } @else {
    @include only ($sizes, $i) {
      @content;
    }
  }
}

@mixin grid ($sizes) {
  @each $name, $bottom in $sizes {
    $i: index(($sizes), ($name $bottom));
    $container-width: $bottom + $gutter-width;
    $division: 1 / $columns * 100%;

    @include bottom ($bottom) {
      @if ($i != 1) {
        .container {
          width: $container-width;
        }
      }

      $col-list: null;
      @for $k from 1 through $columns {
        $col-list: append($col-list, unquote(".col-#{$name}-#{$k}, .col-#{$name}-offset-#{$k - 1}"), comma);
      }

      #{append($col-list, unquote(".col-#{$name}"), comma)} {
        box-sizing: border-box;
        flex: 0 0 auto;
        padding-right: $half-gutter-width;
        padding-left: $half-gutter-width;
      }

      .col-#{$name} {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
      }


      @for $j from 1 through $columns {
        .col-#{$name}-#{$j} {
          flex-basis: $division * $j;
          max-width: $division * $j;
        }

        .col-#{$name}-offset-#{$j - 1} {
          margin-left: $division * ($j - 1);
        }
      }

      @each $alignment in start, center, end {
        .#{$alignment}-#{$name} {
          justify-content: flex-#{$alignment};
          text-align: $alignment;
        }
      }

      @each $position, $alignment in (top: 'flex-start', middle: 'center', bottom: 'flex-end') {
        .#{$position}-#{$name} {
          align-items: $alignment;
        }
      }

      @each $justification in around, between {
        .#{$justification}-#{$name} {
          justify-content: space-#{$justification};
        }
      }

      @each $order, $number in (first: -1, last: 1) {
        .#{$order}-#{$name} {
          order: $number;
        }
      }
    }

    @each $type in bottom, only {
      .flex-column-#{if($type == only, 'only-', '')}#{$name} {
        display: none !important;

        @include break ($type, $sizes, $bottom, $i) {
          flex-direction: column;
        }
      }

      @each $display, $prop in (hidden: none, visible: initial) {
        .#{$display}-#{if($type == only, 'only-', '')}#{$name} {
          @if $display == visible { display: none !important; }
          @include break ($type, $sizes, $bottom, $i) {
            display: $prop !important;
          }
        }
      }

      @each $visibility in flex, inline, inline-block, block {
        .visible-#{if($type == only, 'only-', '')}#{$name}-#{$visibility} {
          display: none !important;

          @include break ($type, $sizes, $bottom, $i) {
            display: $visibility !important;
          }
        }
      }
    }
  }
}
