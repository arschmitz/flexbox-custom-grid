$gutter-width: 1em !default;
$outer-margin: 2em !default;
$gutter-compensation: $gutter-width * -0.5;
$half-gutter-width: $gutter-width * 0.5;

.container-fluid, .container {
  margin-right: auto;
  margin-left: auto;
}

.container-fluid {
  padding-right: $outer-margin;
  padding-left: $outer-margin;
}

.row {
  box-sizing: border-box;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;
  margin-right: $gutter-compensation;
  margin-left: $gutter-compensation;
}

.row.reverse {
  flex-direction: row-reverse;
}

.col.reverse {
  flex-direction: column-reverse;
}

.flex-center {
  justify-content: center !important;
  align-items: center !important;
}

.flex-center--x {
  justify-content: center !important;
}

.flex-center--y {
  align-items: center !important;
}

.flex-column {
  flex-direction: column;
}

@mixin bottom ($size) {
  @if ($size == 0) {
    @content;
  } @else {
    @media only screen and (min-width: $size) {
      @content;
    }
  }
}

@mixin only ($sizes, $i) {
  @if ($i == 1) {
    $next: nth($sizes, 2);
    @media (max-width: map-get($next, 'size')) {
      @content;
    }
  } @else if (length($sizes) > $i) {
    $next: nth($sizes, $i + 1);
    $current: nth($sizes, $i);
    @media (min-width: map-get($current, 'size')) and (max-width: map-get($next, 'size') - .001) {
      @content;
    }
  } @else {
    $current: nth($sizes, $i);
    @media (min-width: map-get($current, 'size')) {
      @content;
    }
  }
}

@mixin break ($type, $sizes, $bottom, $i) {
  @if ($type == bottom) {
    @include bottom ($bottom) {
      @content;
    }
  } @else {
    @include only ($sizes, $i) {
      @content;
    }
  }
}

@mixin grid ($sizes) {
  @for $i from 1 through length($sizes) {
    $breakpoint: nth($sizes, $i);
    $name: map-get($breakpoint, 'name');
    $bottom: map-get($breakpoint, 'size');
    $container-width: $bottom + gutter-width;
    $displays: flex, inline, inline-block, block;
    $types: bottom, only;
    $division: 1 / 12 * 100%;

    @include bottom ($bottom) {
      @if ($i != 1) {
        .container {
          width: $container-width;
        }
      }

      $col-list: null;
      @for $k from 1 through 12 {
        $col-list: append($col-list, unquote(".col-#{$name}-#{$k}, .col-#{$name}-offset-#{$k - 1}"), comma);
      }

      #{append($col-list, unquote(".col-#{$name}"), comma)} {
        box-sizing: border-box;
        flex: 0 0 auto;
        padding-right: $half-gutter-width;
        padding-left: $half-gutter-width;
      }

      .col-#{$name} {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
      }


      @for $j from 1 through 12 {
        .col-#{$name}-#{$j} {
          flex-basis: $division * $j;
          max-width: $division * $j;
        }

        .col-#{$name}-offset-#{$j - 1} {
          margin-left: $division * ($j - 1);
        }
      }

      .start-#{$name} {
        justify-content: flex-start;
        text-align: start;
      }

      .center-#{$name} {
        justify-content: center;
        text-align: center;
      }

      .end-#{$name} {
        justify-content: flex-end;
        text-align: end;
      }

      .top-#{$name} {
        align-items: flex-start;
      }

      .middle-#{$name} {
        align-items: center;
      }

      .bottom-#{$name} {
        align-items: flex-end;
      }

      .around-#{$name} {
        justify-content: space-around;
      }

      .between-#{$name} {
        justify-content: space-between;
      }

      .first-#{$name} {
        order: -1;
      }

      .last-#{$name} {
        order: 1;
      }
    }

    @each $type in $types {
      .flex-column-#{if($type == only, 'only-', '')}#{$name} {
        display: none !important;

        @include break ($type, $sizes, $bottom, $i) {
          flex-direction: column;
        }
      }

      .hidden-#{if($type == only, 'only-', '')}#{$name} {
        @include break ($type, $sizes, $bottom, $i) {
          display: none !important;
        }
      }

      .visible-#{if($type == only, 'only-', '')}#{$name} {
        display: none !important;

        @include break ($type, $sizes, $bottom, $i) {
          display: initial !important;
        }
      }

      @each $visibility in $displays {
        .visible-#{if($type == only, 'only-', '')}#{$name}-#{$visibility} {
          display: none !important;

          @include break ($type, $sizes, $bottom, $i) {
            display: $visibility !important;
          }
        }
      }
    }
  }
}
